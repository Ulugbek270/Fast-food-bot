from aiogram import Bot, Dispatcher, executor
from aiogram.types import Message, CallbackQuery, LabeledPrice
from database import *
from keayboards import *

TOKEN = '6595671204:AAFbCBbsIci9CUd3tx-eJCaQd1OwioeWGeU'
PAYMENT = '398062629:TEST:999999999_F91D8F69C042267444B74CC0B3C747757EB0E065'

bot = Bot(TOKEN)

dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def command_start(message: Message):
    await message.answer(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {message.from_user.full_name}.\n–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ë–æ—Ç –í–∫—É—Å–Ω–æ –∏ –¢–æ—á–∫–∞')

    await register_or_authentication_user(message)


async def register_or_authentication_user(message: Message):
    chat_id = message.chat.id
    user = first_select_user(chat_id)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–≥ id
    if user:
        await message.answer('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')
        await show_main_menu(message)
    else:
        await message.answer('–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥–µ–ª–∏—Ç—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º', reply_markup=send_contact())


@dp.message_handler(content_types=['contact'])
async def finish_register(message: Message):
    chat_id = message.chat.id
    full_name = message.from_user.full_name
    phone = message.contact.phone_number
    first_register_user(chat_id, full_name, phone)
    await create_cart_for_user(message)
    await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')
    await show_main_menu(message)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
async def create_cart_for_user(message):
    chat_id = message.chat.id
    try:
        insert_to_cart(chat_id)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
    except:
        pass


async def show_main_menu(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', reply_markup=generate_main_menu())


#  @dp.message_handler(regexp='‚úî –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑')
@dp.message_handler(lambda message: '‚úî –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑' in message.text)
async def make_order(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=category_products())


@dp.callback_query_handler(lambda call: 'category' in call.data)
async def show_products(call: CallbackQuery):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    _, category_id = call.data.split('_')
    category_id = int(category_id)
    await bot.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç: ', chat_id, message_id,
                                reply_markup=products_by_category(category_id))


@dp.callback_query_handler(lambda call: 'main_menu' in call.data)
async def return_to_main_menu(call: CallbackQuery):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    await bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ', reply_markup=category_products())


@dp.callback_query_handler(lambda call: 'product' in call.data)
async def show_detail_product(call: CallbackQuery):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    _, product_id = call.data.split('_')
    product_id = int(product_id)
    product = get_product_detail(product_id)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç –ø–æ id
    cart_id = get_user_cart_id(chat_id)
    quantity = 0

    await bot.delete_message(chat_id, message_id)
    with open(product[-1], mode='rb') as img:
        await bot.send_photo(chat_id=chat_id, photo=img, caption=f'''{product[2]}

–ò–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã: {product[4]}

–¶–µ–Ω–∞: {product[3]} —Å—É–º–º''', reply_markup=generate_count_product(product_id=product_id, category_id=product[1],
                                                                cart_id=cart_id, product_name=product[2], c=quantity))


@dp.callback_query_handler(lambda call: 'plus' in call.data)
async def add_product_cart(call: CallbackQuery):
    chat_id = call.message.chat.id
    _, quantity, product_id = call.data.split('_')
    quantity, product_id = int(quantity), int(product_id)

    quantity += 1
    message_id = call.message.message_id
    product = get_product_detail(product_id)
    cart_id = get_user_cart_id(chat_id)

    await bot.edit_message_caption(chat_id=chat_id,
                                   message_id=message_id,
                                   caption=f'''{product[2]}

–ò–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã: {product[4]}

–¶–µ–Ω–∞: {product[3]} —Å—É–º–º''', reply_markup=generate_count_product(product_id=product_id, category_id=product[1],
                                                                cart_id=cart_id, c=quantity))


@dp.callback_query_handler(lambda call: 'minus' in call.data)
async def minus_product_cart(call: CallbackQuery):
    chat_id = call.message.chat.id
    _, quantity, product_id = call.data.split('_')
    quantity, product_id = int(quantity), int(product_id)
    message_id = call.message.message_id

    product = get_product_detail(product_id)
    cart_id = get_user_cart_id(chat_id)

    if quantity <= 1:
        await bot.answer_callback_query(call.id, '–ú–µ–Ω—å—à–µ 1 –Ω–µ–ª—å–∑—è')
    else:
        quantity -= 1
        await bot.edit_message_caption(chat_id=chat_id, message_id=message_id,
                                       caption=f'''{product[2]}
    
–ò–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã: {product[4]}
    
–¶–µ–Ω–∞: {product[3]} —Å—É–º–º''', reply_markup=generate_count_product(product_id=product_id, category_id=product[1],
                                                                cart_id=cart_id, c=quantity))


@dp.callback_query_handler(lambda call: 'cart' in call.data)
async def add_product_to_cart_products(call: CallbackQuery):
    chat_id = call.message.chat.id
    _, product_id, quantity = call.data.split('_')
    product_id, quantity = int(product_id), int(quantity)

    product = get_product_detail(product_id)
    print(product)
    cart_id = get_user_cart_id(chat_id)
    final_price = quantity * product[3]

    #  –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ä–∑–∏–Ω—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    if insert_or_update_cart_products(cart_id, product[2], quantity, final_price):
        await bot.answer_callback_query(call.id, '–ü—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É')
    else:
        await bot.answer_callback_query(call.id, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–æ')




@dp.callback_query_handler(lambda call: 'back' in call.data)
async def return_to_product(call: CallbackQuery):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    _, category_id = call.data.split('_')
    category_id = int(category_id)

    await bot.delete_message(chat_id, message_id)
    await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç: ', reply_markup=products_by_category(category_id))




@dp.message_handler(regexp='üõí –ö–æ—Ä–∑–∏–Ω–∞')
async def show_cart(message: Message, edit_message: bool=False):
    chat_id = message.chat.id
    cart_id = get_user_cart_id(chat_id)

    try:
        update_carts(cart_id)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞ –∏ –∫–æ–ª-–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ carts
    except Exception as e:
        print(e)
        await message.answer('–ö–æ—Ä–∑–∏–Ω–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞')
        return

    cart_products = get_cart_products(cart_id)  # –§–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞, –∫–æ–ª-–≤–∞ –∏ —Å—É–º–º—ã
    total_products, total_price = get_total_products_total_price(cart_id)  # –§—É–Ω–∫. –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—à —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –∫–æ–ª-–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤


    text = '–í–∞—à –∑–∞–∫–∞–∑ \n\n'
    i = 0
    for product_name, quantity, final_price in cart_products:
        i += 1
        text += f'''{i}. {product_name}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}
–°—É–º–º–∞: {final_price} —Å—É–º–º\n\n'''

    text += f'''–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {0 if total_products is None else total_products}
–°—É–º–º–∞ —Å—á—ë—Ç–∞: {0 if total_price is None else total_price} —Å—É–º–º'''

    if edit_message:
        await bot.edit_message_text(text, chat_id, message.message_id, reply_markup=generate_cart_menu(cart_id))
    else:
        await bot.send_message(chat_id, text, reply_markup=generate_cart_menu(cart_id))




@dp.callback_query_handler(lambda call: 'delete' in call.data)
async def delete_cart_product(call: CallbackQuery):
    _, cart_product_id = call.data.split('_')
    cart_product_id = int(cart_product_id)
    message = call.message

    delete_cart_product_from(cart_product_id)  # –§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–∏—Ç —É–¥–∞–ª—è—Ç—å –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤

    await bot.answer_callback_query(call.id, '–ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª—ë–Ω –∏–∑ –ö–æ—Ä–∑–∏–Ω—ã')
    await show_cart(message, edit_message=True)



@dp.callback_query_handler(lambda call: 'order' in call.data)
async def create_order(call: CallbackQuery):
    chat_id = call.message.chat.id
    _, cart_id = call.data.split('_')
    cart_id = int(cart_id)

    cart_products = get_cart_products(cart_id)  # –§–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞, –∫–æ–ª-–≤–∞ –∏ —Å—É–º–º—ã
    total_products, total_price = get_total_products_total_price(
        cart_id)  # –§—É–Ω–∫. –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—à —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –∫–æ–ª-–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤

    text = '–í–∞—à –∑–∞–∫–∞–∑ \n\n'
    i = 0
    for product_name, quantity, final_price in cart_products:
        i += 1
        text += f'''{i}. {product_name}
    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}
    –°—É–º–º–∞: {final_price} —Å—É–º–º\n\n'''

    text += f'''–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {0 if total_products is None else total_products}
    –°—É–º–º–∞ —Å—á—ë—Ç–∞: {0 if total_price is None else total_price} —Å—É–º–º'''

    await bot.send_invoice(  # –ú–µ—Ç–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã
        chat_id=chat_id,
        title=f'–ó–∞–∫–∞–∑ ‚Ññ{cart_id}',
        description=text,
        payload='bot-defined invoice payload',
        provider_token=PAYMENT,
        currency='UZS',
        prices=[
            LabeledPrice(label='–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å', amount=int(total_price * 100)),
            LabeledPrice(label='–î–æ—Å—Ç–∞–≤–∫–∞', amount=1000000)
        ],
        start_parameter='start_parameter'
    )

@dp.pre_checkout_query_handler(lambda query: True)
async def checkout(pre_checkout_query):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True, error_message='–û–ø–ª–∞—Ç–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—Ä—Ç—É')


@dp.message_handler(content_types=['successful_payment'])
async def get_payment(message: Message):
    chat_id = message.chat.id
    await bot.send_message(chat_id, '–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –ú—ã –≤–∞—Å –∫–∏–Ω—É–ª–∏')
    cart_id = get_user_cart_id(chat_id)




    drop_cart_products_default(cart_id)   # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—â–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã




















executor.start_polling(dispatcher=dp)